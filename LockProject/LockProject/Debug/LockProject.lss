
LockProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000002d6  0000034a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000b0  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000965  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000040e  00000000  00000000  00000dad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000347  00000000  00000000  000011bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000017c  00000000  00000000  00001504  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000289  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000005d6  00000000  00000000  00001909  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  00001edf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	32 c0       	rjmp	.+100    	; 0x66 <__ctors_end>
   2:	44 c0       	rjmp	.+136    	; 0x8c <__bad_interrupt>
   4:	43 c0       	rjmp	.+134    	; 0x8c <__bad_interrupt>
   6:	42 c0       	rjmp	.+132    	; 0x8c <__bad_interrupt>
   8:	41 c0       	rjmp	.+130    	; 0x8c <__bad_interrupt>
   a:	40 c0       	rjmp	.+128    	; 0x8c <__bad_interrupt>
   c:	3f c0       	rjmp	.+126    	; 0x8c <__bad_interrupt>
   e:	3e c0       	rjmp	.+124    	; 0x8c <__bad_interrupt>
  10:	3d c0       	rjmp	.+122    	; 0x8c <__bad_interrupt>
  12:	3c c0       	rjmp	.+120    	; 0x8c <__bad_interrupt>
  14:	3b c0       	rjmp	.+118    	; 0x8c <__bad_interrupt>
  16:	3a c0       	rjmp	.+116    	; 0x8c <__bad_interrupt>
  18:	39 c0       	rjmp	.+114    	; 0x8c <__bad_interrupt>
  1a:	38 c0       	rjmp	.+112    	; 0x8c <__bad_interrupt>
  1c:	37 c0       	rjmp	.+110    	; 0x8c <__bad_interrupt>
  1e:	36 c0       	rjmp	.+108    	; 0x8c <__bad_interrupt>
  20:	35 c0       	rjmp	.+106    	; 0x8c <__bad_interrupt>

00000022 <__trampolines_end>:
  22:	4c 69       	ori	r20, 0x9C	; 156
  24:	6e 65       	ori	r22, 0x5E	; 94
  26:	20 32       	cpi	r18, 0x20	; 32
  28:	20 6c       	ori	r18, 0xC0	; 192
  2a:	6f 6e       	ori	r22, 0xEF	; 239
  2c:	67 65       	ori	r22, 0x57	; 87
  2e:	72 20       	and	r7, r2
  30:	74 68       	ori	r23, 0x84	; 132
  32:	61 6e       	ori	r22, 0xE1	; 225
  34:	20 31       	cpi	r18, 0x10	; 16
  36:	34 20       	and	r3, r4
  38:	63 68       	ori	r22, 0x83	; 131
  3a:	61 72       	andi	r22, 0x21	; 33
  3c:	61 63       	ori	r22, 0x31	; 49
  3e:	74 65       	ori	r23, 0x54	; 84
  40:	72 73       	andi	r23, 0x32	; 50
	...

00000043 <__c.1814>:
  43:	4c 69 6e 65 20 31 20 6c 6f 6e 67 65 72 20 74 68     Line 1 longer th
  53:	61 6e 20 31 34 20 63 68 61 72 61 63 74 65 72 73     an 14 characters
  63:	0a 00 00                                            ...

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d2 e0       	ldi	r29, 0x02	; 2
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	a0 e6       	ldi	r26, 0x60	; 96
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e6 ed       	ldi	r30, 0xD6	; 214
  7a:	f2 e0       	ldi	r31, 0x02	; 2
  7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
  7e:	05 90       	lpm	r0, Z+
  80:	0d 92       	st	X+, r0
  82:	ae 37       	cpi	r26, 0x7E	; 126
  84:	b1 07       	cpc	r27, r17
  86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>
  88:	bc d0       	rcall	.+376    	; 0x202 <main>
  8a:	23 c1       	rjmp	.+582    	; 0x2d2 <_exit>

0000008c <__bad_interrupt>:
  8c:	b9 cf       	rjmp	.-142    	; 0x0 <__vectors>

0000008e <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  8e:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
  90:	00 c0       	rjmp	.+0      	; 0x92 <toggle_e+0x4>
    lcd_e_low();
  92:	de 98       	cbi	0x1b, 6	; 27
  94:	08 95       	ret

00000096 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	d8 2f       	mov	r29, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
  9c:	66 23       	and	r22, r22
  9e:	11 f0       	breq	.+4      	; 0xa4 <lcd_write+0xe>
       lcd_rs_high();
  a0:	dc 9a       	sbi	0x1b, 4	; 27
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <lcd_write+0x10>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
  a4:	dc 98       	cbi	0x1b, 4	; 27
    }
    lcd_rw_low();
  a6:	dd 98       	cbi	0x1b, 5	; 27

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
  a8:	8a b3       	in	r24, 0x1a	; 26
  aa:	8f 60       	ori	r24, 0x0F	; 15
  ac:	8a bb       	out	0x1a, r24	; 26

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
  ae:	cb b3       	in	r28, 0x1b	; 27
  b0:	c0 7f       	andi	r28, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
  b2:	8d 2f       	mov	r24, r29
  b4:	82 95       	swap	r24
  b6:	8f 70       	andi	r24, 0x0F	; 15
  b8:	8c 2b       	or	r24, r28
  ba:	8b bb       	out	0x1b, r24	; 27
        lcd_e_toggle();
  bc:	e8 df       	rcall	.-48     	; 0x8e <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
  be:	df 70       	andi	r29, 0x0F	; 15
  c0:	dc 2b       	or	r29, r28
  c2:	db bb       	out	0x1b, r29	; 27
        lcd_e_toggle();
  c4:	e4 df       	rcall	.-56     	; 0x8e <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
  c6:	cf 60       	ori	r28, 0x0F	; 15
  c8:	cb bb       	out	0x1b, r28	; 27
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	08 95       	ret

000000d0 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
  d0:	88 23       	and	r24, r24
  d2:	11 f0       	breq	.+4      	; 0xd8 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
  d4:	dc 9a       	sbi	0x1b, 4	; 27
  d6:	01 c0       	rjmp	.+2      	; 0xda <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
  d8:	dc 98       	cbi	0x1b, 4	; 27
    lcd_rw_high();                           /* RW=1  read mode      */
  da:	dd 9a       	sbi	0x1b, 5	; 27
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
  dc:	8a b3       	in	r24, 0x1a	; 26
  de:	80 7f       	andi	r24, 0xF0	; 240
  e0:	8a bb       	out	0x1a, r24	; 26
        
        lcd_e_high();
  e2:	de 9a       	sbi	0x1b, 6	; 27
        lcd_e_delay();        
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_read+0x16>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
  e6:	99 b3       	in	r25, 0x19	; 25
        lcd_e_low();
  e8:	de 98       	cbi	0x1b, 6	; 27
        
        lcd_e_delay();                       /* Enable 500ns low       */
  ea:	00 c0       	rjmp	.+0      	; 0xec <lcd_read+0x1c>
        
        lcd_e_high();
  ec:	de 9a       	sbi	0x1b, 6	; 27
        lcd_e_delay();
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <lcd_read+0x20>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
  f0:	89 b3       	in	r24, 0x19	; 25
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
  f2:	92 95       	swap	r25
  f4:	90 7f       	andi	r25, 0xF0	; 240
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
  f6:	8f 70       	andi	r24, 0x0F	; 15
        lcd_e_low();
  f8:	de 98       	cbi	0x1b, 6	; 27
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
  fa:	89 2b       	or	r24, r25
  fc:	08 95       	ret

000000fe <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	e7 df       	rcall	.-50     	; 0xd0 <lcd_read>
 102:	88 23       	and	r24, r24
 104:	e4 f3       	brlt	.-8      	; 0xfe <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	df df       	rcall	.-66     	; 0xd0 <lcd_read>
    
}/* lcd_waitbusy */
 112:	08 95       	ret

00000114 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 114:	cf 93       	push	r28
 116:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 118:	f2 df       	rcall	.-28     	; 0xfe <lcd_waitbusy>
    lcd_write(cmd,0);
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	8c 2f       	mov	r24, r28
 11e:	bb df       	rcall	.-138    	; 0x96 <lcd_write>
}
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	f6 df       	rcall	.-20     	; 0x114 <lcd_command>
 128:	08 95       	ret

0000012a <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 12a:	cf 93       	push	r28
 12c:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 12e:	e7 df       	rcall	.-50     	; 0xfe <lcd_waitbusy>
    if (c=='\n')
 130:	ca 30       	cpi	r28, 0x0A	; 10
 132:	41 f4       	brne	.+16     	; 0x144 <lcd_putc+0x1a>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 134:	80 34       	cpi	r24, 0x40	; 64
 136:	10 f4       	brcc	.+4      	; 0x13c <lcd_putc+0x12>
        addressCounter = LCD_START_LINE2;
 138:	80 e4       	ldi	r24, 0x40	; 64
 13a:	01 c0       	rjmp	.+2      	; 0x13e <lcd_putc+0x14>
    else
        addressCounter = LCD_START_LINE1;
 13c:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 13e:	80 58       	subi	r24, 0x80	; 128
 140:	e9 df       	rcall	.-46     	; 0x114 <lcd_command>
 142:	03 c0       	rjmp	.+6      	; 0x14a <lcd_putc+0x20>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	8c 2f       	mov	r24, r28
 148:	a6 df       	rcall	.-180    	; 0x96 <lcd_write>
    }

}/* lcd_putc */
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 152:	ec 01       	movw	r28, r24
 154:	21 96       	adiw	r28, 0x01	; 1
 156:	fc 01       	movw	r30, r24
 158:	80 81       	ld	r24, Z
 15a:	88 23       	and	r24, r24
 15c:	21 f0       	breq	.+8      	; 0x166 <lcd_puts+0x18>
        lcd_putc(c);
 15e:	e5 df       	rcall	.-54     	; 0x12a <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 160:	89 91       	ld	r24, Y+
 162:	81 11       	cpse	r24, r1
 164:	fc cf       	rjmp	.-8      	; 0x15e <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 170:	ec 01       	movw	r28, r24
 172:	21 96       	adiw	r28, 0x01	; 1
 174:	fc 01       	movw	r30, r24
 176:	84 91       	lpm	r24, Z
 178:	88 23       	and	r24, r24
 17a:	31 f0       	breq	.+12     	; 0x188 <lcd_puts_p+0x1c>
        lcd_putc(c);
 17c:	d6 df       	rcall	.-84     	; 0x12a <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 17e:	fe 01       	movw	r30, r28
 180:	84 91       	lpm	r24, Z
 182:	21 96       	adiw	r28, 0x01	; 1
 184:	81 11       	cpse	r24, r1
 186:	fa cf       	rjmp	.-12     	; 0x17c <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 18e:	cf 93       	push	r28
 190:	c8 2f       	mov	r28, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 192:	8a b3       	in	r24, 0x1a	; 26
 194:	8f 67       	ori	r24, 0x7F	; 127
 196:	8a bb       	out	0x1a, r24	; 26
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 198:	e0 e8       	ldi	r30, 0x80	; 128
 19a:	fe e3       	ldi	r31, 0x3E	; 62
 19c:	31 97       	sbiw	r30, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_init+0xe>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1a0:	d9 9a       	sbi	0x1b, 1	; 27
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1a2:	d8 9a       	sbi	0x1b, 0	; 27
    lcd_e_toggle();
 1a4:	74 df       	rcall	.-280    	; 0x8e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1a6:	e0 e8       	ldi	r30, 0x80	; 128
 1a8:	f3 e1       	ldi	r31, 0x13	; 19
 1aa:	31 97       	sbiw	r30, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_init+0x1c>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1ae:	6f df       	rcall	.-290    	; 0x8e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1b0:	e0 e4       	ldi	r30, 0x40	; 64
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	31 97       	sbiw	r30, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <lcd_init+0x26>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1b8:	6a df       	rcall	.-300    	; 0x8e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ba:	e0 e4       	ldi	r30, 0x40	; 64
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_init+0x30>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1c2:	d8 98       	cbi	0x1b, 0	; 27
    lcd_e_toggle();
 1c4:	64 df       	rcall	.-312    	; 0x8e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1c6:	e0 e4       	ldi	r30, 0x40	; 64
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_init+0x3c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1ce:	88 e2       	ldi	r24, 0x28	; 40
 1d0:	a1 df       	rcall	.-190    	; 0x114 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	9f df       	rcall	.-194    	; 0x114 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 1d6:	a6 df       	rcall	.-180    	; 0x124 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 1d8:	86 e0       	ldi	r24, 0x06	; 6
 1da:	9c df       	rcall	.-200    	; 0x114 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 1dc:	8c 2f       	mov	r24, r28
 1de:	9a df       	rcall	.-204    	; 0x114 <lcd_command>

}/* lcd_init */
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <wait_until_key_pressed>:
{
    unsigned char temp1, temp2;
    unsigned int i;
    
    do {
        temp1 = PINB;                  // read input
 1e4:	4f ef       	ldi	r20, 0xFF	; 255
 1e6:	3f ef       	ldi	r19, 0xFF	; 255
 1e8:	26 b3       	in	r18, 0x16	; 22
 1ea:	84 2f       	mov	r24, r20
 1ec:	93 2f       	mov	r25, r19
 1ee:	01 97       	sbiw	r24, 0x01	; 1
        for(i=0;i<65535;i++);
 1f0:	00 97       	sbiw	r24, 0x00	; 0
 1f2:	e9 f7       	brne	.-6      	; 0x1ee <wait_until_key_pressed+0xa>
        temp2 = PINB;                  // read input
 1f4:	86 b3       	in	r24, 0x16	; 22
        temp1 = (temp1 & temp2);       // debounce input
 1f6:	82 23       	and	r24, r18
    } while ( temp1 & _BV(PINB0) );
 1f8:	80 fd       	sbrc	r24, 0
 1fa:	f6 cf       	rjmp	.-20     	; 0x1e8 <wait_until_key_pressed+0x4>
    
    loop_until_bit_is_set(PINB,PINB0);            /* wait until key is released */
 1fc:	b0 9b       	sbis	0x16, 0	; 22
 1fe:	fe cf       	rjmp	.-4      	; 0x1fc <wait_until_key_pressed+0x18>
}
 200:	08 95       	ret

00000202 <main>:


int main(void)
{
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62
 20a:	27 97       	sbiw	r28, 0x07	; 7
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	f8 94       	cli
 210:	de bf       	out	0x3e, r29	; 62
 212:	0f be       	out	0x3f, r0	; 63
 214:	cd bf       	out	0x3d, r28	; 61
    char buffer[7];
    int  num=134;
    unsigned char i;
    
    
    DDRB &=~ (1 << PB0);        /* Pin PD2 input              */
 216:	b8 98       	cbi	0x17, 0	; 23
    PORTB |= (1 << PB0);        /* Pin PD2 pull-up enabled    */
 218:	c0 9a       	sbi	0x18, 0	; 24


    /* initialize display, cursor off */
    lcd_init(LCD_DISP_ON);
 21a:	8c e0       	ldi	r24, 0x0C	; 12
 21c:	b8 df       	rcall	.-144    	; 0x18e <lcd_init>
        /* 
         * Test 1:  write text to display
         */

        /* clear display and home cursor */
        lcd_clrscr();
 21e:	82 df       	rcall	.-252    	; 0x124 <lcd_clrscr>
        
        /* put string to display (line 1) with linefeed */
        lcd_puts("this was difficult\n");
 220:	80 e6       	ldi	r24, 0x60	; 96
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	94 df       	rcall	.-216    	; 0x14e <lcd_puts>

        /* cursor is now on second line, write second line */
        lcd_puts("yay");
 226:	84 e7       	ldi	r24, 0x74	; 116
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	91 df       	rcall	.-222    	; 0x14e <lcd_puts>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 22c:	db df       	rcall	.-74     	; 0x1e4 <wait_until_key_pressed>
        /*
         * Test 2: use lcd_command() to turn on cursor
         */
        
        /* turn on cursor */
        lcd_command(LCD_DISP_ON_CURSOR);
 22e:	8e e0       	ldi	r24, 0x0E	; 14
 230:	71 df       	rcall	.-286    	; 0x114 <lcd_command>

        /* put string */
        lcd_puts( "CurOn");
 232:	88 e7       	ldi	r24, 0x78	; 120
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	8b df       	rcall	.-234    	; 0x14e <lcd_puts>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 238:	d5 df       	rcall	.-86     	; 0x1e4 <wait_until_key_pressed>

        /*
         * Test 3: display shift
         */
        
        lcd_clrscr();     /* clear display home cursor */
 23a:	74 df       	rcall	.-280    	; 0x124 <lcd_clrscr>

        /* put string from program memory to display */
        lcd_puts_P( "Line 1 longer than 14 characters\n" );
 23c:	83 e4       	ldi	r24, 0x43	; 67
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	95 df       	rcall	.-214    	; 0x16c <lcd_puts_p>
        lcd_puts_P( "Line 2 longer than 14 characters" );
 242:	82 e2       	ldi	r24, 0x22	; 34
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	92 df       	rcall	.-220    	; 0x16c <lcd_puts_p>
        
        /* move BOTH lines one position to the left */
        lcd_command(LCD_MOVE_DISP_LEFT);
 248:	88 e1       	ldi	r24, 0x18	; 24
 24a:	64 df       	rcall	.-312    	; 0x114 <lcd_command>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 24c:	cb df       	rcall	.-106    	; 0x1e4 <wait_until_key_pressed>

        /* turn off cursor */
        lcd_command(LCD_DISP_ON);
 24e:	8c e0       	ldi	r24, 0x0C	; 12
 250:	61 df       	rcall	.-318    	; 0x114 <lcd_command>
        
        /*
         *   Test: Display integer values
         */
        
        lcd_clrscr();   /* clear display home cursor */
 252:	68 df       	rcall	.-304    	; 0x124 <lcd_clrscr>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 254:	4a e0       	ldi	r20, 0x0A	; 10
 256:	be 01       	movw	r22, r28
 258:	6f 5f       	subi	r22, 0xFF	; 255
 25a:	7f 4f       	sbci	r23, 0xFF	; 255
 25c:	86 e8       	ldi	r24, 0x86	; 134
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	05 d0       	rcall	.+10     	; 0x26c <__itoa_ncheck>
        
        /* convert interger into string */
        itoa( num , buffer, 10);
        
        /* put converted string to display */
        lcd_puts(buffer);
 262:	ce 01       	movw	r24, r28
 264:	01 96       	adiw	r24, 0x01	; 1
 266:	73 df       	rcall	.-282    	; 0x14e <lcd_puts>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 268:	bd df       	rcall	.-134    	; 0x1e4 <wait_until_key_pressed>
 26a:	d9 cf       	rjmp	.-78     	; 0x21e <main+0x1c>

0000026c <__itoa_ncheck>:
 26c:	bb 27       	eor	r27, r27
 26e:	4a 30       	cpi	r20, 0x0A	; 10
 270:	31 f4       	brne	.+12     	; 0x27e <__itoa_ncheck+0x12>
 272:	99 23       	and	r25, r25
 274:	22 f4       	brpl	.+8      	; 0x27e <__itoa_ncheck+0x12>
 276:	bd e2       	ldi	r27, 0x2D	; 45
 278:	90 95       	com	r25
 27a:	81 95       	neg	r24
 27c:	9f 4f       	sbci	r25, 0xFF	; 255
 27e:	01 c0       	rjmp	.+2      	; 0x282 <__utoa_common>

00000280 <__utoa_ncheck>:
 280:	bb 27       	eor	r27, r27

00000282 <__utoa_common>:
 282:	fb 01       	movw	r30, r22
 284:	55 27       	eor	r21, r21
 286:	aa 27       	eor	r26, r26
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	aa 1f       	adc	r26, r26
 28e:	a4 17       	cp	r26, r20
 290:	10 f0       	brcs	.+4      	; 0x296 <__utoa_common+0x14>
 292:	a4 1b       	sub	r26, r20
 294:	83 95       	inc	r24
 296:	50 51       	subi	r21, 0x10	; 16
 298:	b9 f7       	brne	.-18     	; 0x288 <__utoa_common+0x6>
 29a:	a0 5d       	subi	r26, 0xD0	; 208
 29c:	aa 33       	cpi	r26, 0x3A	; 58
 29e:	08 f0       	brcs	.+2      	; 0x2a2 <__utoa_common+0x20>
 2a0:	a9 5d       	subi	r26, 0xD9	; 217
 2a2:	a1 93       	st	Z+, r26
 2a4:	00 97       	sbiw	r24, 0x00	; 0
 2a6:	79 f7       	brne	.-34     	; 0x286 <__utoa_common+0x4>
 2a8:	b1 11       	cpse	r27, r1
 2aa:	b1 93       	st	Z+, r27
 2ac:	11 92       	st	Z+, r1
 2ae:	cb 01       	movw	r24, r22
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <strrev>

000002b2 <strrev>:
 2b2:	dc 01       	movw	r26, r24
 2b4:	fc 01       	movw	r30, r24
 2b6:	67 2f       	mov	r22, r23
 2b8:	71 91       	ld	r23, Z+
 2ba:	77 23       	and	r23, r23
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <strrev+0x4>
 2be:	32 97       	sbiw	r30, 0x02	; 2
 2c0:	04 c0       	rjmp	.+8      	; 0x2ca <strrev+0x18>
 2c2:	7c 91       	ld	r23, X
 2c4:	6d 93       	st	X+, r22
 2c6:	70 83       	st	Z, r23
 2c8:	62 91       	ld	r22, -Z
 2ca:	ae 17       	cp	r26, r30
 2cc:	bf 07       	cpc	r27, r31
 2ce:	c8 f3       	brcs	.-14     	; 0x2c2 <strrev+0x10>
 2d0:	08 95       	ret

000002d2 <_exit>:
 2d2:	f8 94       	cli

000002d4 <__stop_program>:
 2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <__stop_program>
